[gd_resource type="VisualShader" load_steps=30 format=2]

[sub_resource type="VisualShaderNodeVectorOp" id=1]

[sub_resource type="VisualShaderNodeColorUniform" id=2]
uniform_name = "BaseColor"

[sub_resource type="VisualShaderNodeVectorOp" id=3]
default_input_values = [ 0, Vector3( 0, 0, 0 ), 1, Vector3( 1024, 1024, 1024 ) ]
operator = 3

[sub_resource type="OpenSimplexNoise" id=4]
seed = 506033
period = 16.0

[sub_resource type="NoiseTexture" id=5]
width = 1024
height = 1024
seamless = true
noise = SubResource( 4 )

[sub_resource type="VisualShaderNodeTexture" id=6]
output_port_for_preview = 0
texture = SubResource( 5 )

[sub_resource type="VisualShaderNodeVectorOp" id=7]
operator = 2

[sub_resource type="VisualShaderNodeVectorFunc" id=8]
function = 4

[sub_resource type="VisualShaderNodeVectorDecompose" id=9]

[sub_resource type="OpenSimplexNoise" id=10]
seed = 97892

[sub_resource type="NoiseTexture" id=11]
flags = 6
seamless = true
noise = SubResource( 10 )

[sub_resource type="VisualShaderNodeTexture" id=12]
output_port_for_preview = 0
texture = SubResource( 11 )

[sub_resource type="VisualShaderNodeScalarOp" id=13]
default_input_values = [ 0, 0.0, 1, 0.5 ]

[sub_resource type="VisualShaderNodeScalarOp" id=14]
default_input_values = [ 0, 0.0, 1, 1.0 ]
operator = 4

[sub_resource type="VisualShaderNodeVectorCompose" id=15]

[sub_resource type="VisualShaderNodeVectorFunc" id=16]
function = 5

[sub_resource type="VisualShaderNodeColorOp" id=17]

[sub_resource type="VisualShaderNodeVectorOp" id=18]
default_input_values = [ 0, Vector3( 0, 0, 0 ), 1, Vector3( 2, 2, 2 ) ]
operator = 2

[sub_resource type="VisualShaderNodeVectorOp" id=19]
default_input_values = [ 0, Vector3( 0, 0, 0 ), 1, Vector3( 1, 1, 1 ) ]
operator = 1

[sub_resource type="VisualShaderNodeScalarOp" id=20]
default_input_values = [ 0, 0.0, 1, 2.0 ]
operator = 2

[sub_resource type="VisualShaderNodeVectorOp" id=21]

[sub_resource type="VisualShaderNodeGlobalExpression" id=22]
expression = "float rand(vec2 co) {
	return fract(sin(dot(co.xy, vec2(12.9898, 78.233))) * 43758.5453);
}"

[sub_resource type="VisualShaderNodeInput" id=23]
input_name = "time"

[sub_resource type="VisualShaderNodeScalarOp" id=24]
default_input_values = [ 0, 0.0, 1, 800.0 ]
operator = 3

[sub_resource type="VisualShaderNodeVectorOp" id=25]
default_input_values = [ 0, Vector3( 0, 0, 0 ), 1, Vector3( 8192, 8192, 8192 ) ]
operator = 3

[sub_resource type="VisualShaderNodeExpression" id=26]
expression = "star = rand(coord.xy) > 0.995;"

[sub_resource type="VisualShaderNodeSwitch" id=27]
default_input_values = [ 0, false, 1, Vector3( 0.5, 0.5, 0.5 ), 2, Vector3( 0, 0, 0 ) ]

[sub_resource type="VisualShaderNodeInput" id=28]
input_name = "fragcoord"

[sub_resource type="VisualShaderNodeVectorOp" id=29]
operator = 2

[resource]
code = "shader_type spatial;
render_mode unshaded;

uniform sampler2D tex_frg_2;uniform vec4 BaseColor : hint_color;
uniform sampler2D tex_frg_14;

// GlobalExpression:0
	float rand(vec2 co) {
		return fract(sin(dot(co.xy, vec2(12.9898, 78.233))) * 43758.5453);
	}

void vertex() {
// Output:0

}

void fragment() {
// Input:7
	vec3 n_out7p0;
	n_out7p0 = FRAGCOORD.xyz;

// Expression:4
	bool n_out4p0;
	n_out4p0=false;
	{
		n_out4p0 = rand(n_out7p0.xy) > 0.995;
	}
// VectorSwitch:6
	vec3 n_in6p1 = vec3(0.50000,0.50000,0.50000);
	vec3 n_in6p2 = vec3(0.00000,0.00000,0.00000);
	vec3 n_out6p0;
	if(n_out4p0)
	{
		n_out6p0=n_in6p1;
	}
	else
	{
		n_out6p0=n_in6p2;
	}

// VectorOp:13
	vec3 n_in13p1 = vec3(1024.00000,1024.00000,1024.00000);
	vec3 n_out13p0;
	n_out13p0 = n_out7p0 / n_in13p1;

// Texture:2
	vec3 n_out2p0;
	float n_out2p1;
	vec4 tex_frg_2_read = texture( tex_frg_2 , n_out13p0.xy );
	n_out2p0 = tex_frg_2_read.rgb;
	n_out2p1 = tex_frg_2_read.a;

// ColorUniform:11
	vec3 n_out11p0;
	float n_out11p1;
	n_out11p0 = BaseColor.rgb;
	n_out11p1 = BaseColor.a;

// VectorOp:9
	vec3 n_out9p0;
	n_out9p0 = n_out2p0 * n_out11p0;

// VectorOp:10
	vec3 n_out10p0;
	n_out10p0 = n_out6p0 + n_out9p0;

// VectorOp:32
	vec3 n_in32p1 = vec3(8192.00000,8192.00000,8192.00000);
	vec3 n_out32p0;
	n_out32p0 = n_out7p0 / n_in32p1;

// Input:30
	float n_out30p0;
	n_out30p0 = TIME;

// ScalarOp:31
	float n_in31p1 = 800.00000;
	float n_out31p0;
	n_out31p0 = n_out30p0 / n_in31p1;

// VectorOp:29
	vec3 n_out29p0;
	n_out29p0 = n_out32p0 + vec3(n_out31p0);

// Texture:14
	vec3 n_out14p0;
	float n_out14p1;
	vec4 tex_frg_14_read = texture( tex_frg_14 , n_out29p0.xy );
	n_out14p0 = tex_frg_14_read.rgb;
	n_out14p1 = tex_frg_14_read.a;

// VectorOp:26
	vec3 n_in26p1 = vec3(2.00000,2.00000,2.00000);
	vec3 n_out26p0;
	n_out26p0 = n_out14p0 * n_in26p1;

// VectorOp:27
	vec3 n_in27p1 = vec3(1.00000,1.00000,1.00000);
	vec3 n_out27p0;
	n_out27p0 = n_out26p0 - n_in27p1;

// VectorFunc:18
	vec3 n_out18p0;
	{
		vec3 c = n_out11p0;
		vec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);
		vec4 p = mix(vec4(c.bg, K.wz), vec4(c.gb, K.xy), step(c.b, c.g));
		vec4 q = mix(vec4(p.xyw, c.r), vec4(c.r, p.yzx), step(p.x, c.r));
		float d = q.x - min(q.w, q.y);
		float e = 1.0e-10;
		n_out18p0=vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x);
	}

// VectorDecompose:19
	float n_out19p0;
	float n_out19p1;
	float n_out19p2;
	n_out19p0 = n_out18p0.x;
	n_out19p1 = n_out18p0.y;
	n_out19p2 = n_out18p0.z;

// ScalarOp:20
	float n_in20p1 = 0.50000;
	float n_out20p0;
	n_out20p0 = n_out19p0 + n_in20p1;

// ScalarOp:21
	float n_in21p1 = 1.00000;
	float n_out21p0;
	n_out21p0 = mod( n_out20p0 , n_in21p1 );

// ScalarOp:28
	float n_in28p1 = 2.00000;
	float n_out28p0;
	n_out28p0 = n_out19p2 * n_in28p1;

// VectorCompose:22
	vec3 n_out22p0;
	n_out22p0 = vec3( n_out21p0 , n_out19p1 , n_out28p0 );

// VectorFunc:23
	vec3 n_out23p0;
	{
		vec3 c = n_out22p0;
		vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);
		vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);
		n_out23p0=c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);
	}

// VectorOp:15
	vec3 n_out15p0;
	n_out15p0 = n_out27p0 * n_out23p0;

// ColorOp:25
	vec3 n_out25p0;
	n_out25p0=vec3(1.0)-(vec3(1.0)-n_out10p0)*(vec3(1.0)-n_out15p0);

// Output:0
	ALBEDO = n_out25p0;

}

void light() {
// Output:0

}
"
graph_offset = Vector2( -988.468, 575.421 )
flags/unshaded = true
nodes/fragment/0/position = Vector2( 540, 160 )
nodes/fragment/2/node = SubResource( 12 )
nodes/fragment/2/position = Vector2( -420, 360 )
nodes/fragment/3/node = SubResource( 22 )
nodes/fragment/3/position = Vector2( -480, -100 )
nodes/fragment/3/size = Vector2( 515, 251 )
nodes/fragment/3/input_ports = ""
nodes/fragment/3/output_ports = ""
nodes/fragment/3/expression = "float rand(vec2 co) {
	return fract(sin(dot(co.xy, vec2(12.9898, 78.233))) * 43758.5453);
}"
nodes/fragment/4/node = SubResource( 26 )
nodes/fragment/4/position = Vector2( -700, 180 )
nodes/fragment/4/size = Vector2( 250, 150 )
nodes/fragment/4/input_ports = "0,1,coord;"
nodes/fragment/4/output_ports = "0,2,star;"
nodes/fragment/4/expression = "star = rand(coord.xy) > 0.995;"
nodes/fragment/6/node = SubResource( 27 )
nodes/fragment/6/position = Vector2( -140, 200 )
nodes/fragment/7/node = SubResource( 28 )
nodes/fragment/7/position = Vector2( -960, 240 )
nodes/fragment/9/node = SubResource( 29 )
nodes/fragment/9/position = Vector2( -140, 360 )
nodes/fragment/10/node = SubResource( 1 )
nodes/fragment/10/position = Vector2( 100, 220 )
nodes/fragment/11/node = SubResource( 2 )
nodes/fragment/11/position = Vector2( -660, 500 )
nodes/fragment/13/node = SubResource( 3 )
nodes/fragment/13/position = Vector2( -660, 360 )
nodes/fragment/14/node = SubResource( 6 )
nodes/fragment/14/position = Vector2( -420, 720 )
nodes/fragment/15/node = SubResource( 7 )
nodes/fragment/15/position = Vector2( 20, 780 )
nodes/fragment/18/node = SubResource( 8 )
nodes/fragment/18/position = Vector2( -1020, 660 )
nodes/fragment/19/node = SubResource( 9 )
nodes/fragment/19/position = Vector2( -1040, 740 )
nodes/fragment/20/node = SubResource( 13 )
nodes/fragment/20/position = Vector2( -800, 660 )
nodes/fragment/21/node = SubResource( 14 )
nodes/fragment/21/position = Vector2( -620, 660 )
nodes/fragment/22/node = SubResource( 15 )
nodes/fragment/22/position = Vector2( -640, 800 )
nodes/fragment/23/node = SubResource( 16 )
nodes/fragment/23/position = Vector2( -200, 920 )
nodes/fragment/25/node = SubResource( 17 )
nodes/fragment/25/position = Vector2( 320, 200 )
nodes/fragment/26/node = SubResource( 18 )
nodes/fragment/26/position = Vector2( -220, 760 )
nodes/fragment/27/node = SubResource( 19 )
nodes/fragment/27/position = Vector2( -200, 620 )
nodes/fragment/28/node = SubResource( 20 )
nodes/fragment/28/position = Vector2( -820, 800 )
nodes/fragment/29/node = SubResource( 21 )
nodes/fragment/29/position = Vector2( -660, 920 )
nodes/fragment/30/node = SubResource( 23 )
nodes/fragment/30/position = Vector2( -1060, 1000 )
nodes/fragment/31/node = SubResource( 24 )
nodes/fragment/31/position = Vector2( -860, 940 )
nodes/fragment/32/node = SubResource( 25 )
nodes/fragment/32/position = Vector2( -1080, 860 )
nodes/fragment/connections = PoolIntArray( 4, 0, 6, 0, 11, 0, 9, 1, 2, 0, 9, 0, 7, 0, 13, 0, 6, 0, 10, 0, 11, 0, 18, 0, 18, 0, 19, 0, 19, 1, 22, 1, 21, 0, 22, 0, 19, 0, 20, 0, 22, 0, 23, 0, 9, 0, 10, 1, 20, 0, 21, 0, 15, 0, 25, 1, 10, 0, 25, 0, 25, 0, 0, 0, 23, 0, 15, 1, 14, 0, 26, 0, 27, 0, 15, 0, 26, 0, 27, 0, 28, 0, 22, 2, 19, 2, 28, 0, 30, 0, 31, 0, 31, 0, 29, 1, 7, 0, 4, 0, 13, 0, 2, 0, 32, 0, 29, 0, 7, 0, 32, 0, 29, 0, 14, 0 )
