[gd_resource type="ShaderMaterial" load_steps=32 format=2]

[sub_resource type="VisualShaderNodeInput" id=1]
input_name = "time"

[sub_resource type="VisualShaderNodeVectorOp" id=2]

[sub_resource type="Gradient" id=3]
offsets = PoolRealArray( 0.00584795, 0.520468, 1 )
colors = PoolColorArray( 0, 0.648438, 1, 0.588235, 0, 0.179688, 1, 0.294118, 0.03125, 0, 1, 0 )

[sub_resource type="GradientTexture" id=4]
gradient = SubResource( 3 )

[sub_resource type="VisualShaderNodeTexture" id=5]
texture = SubResource( 4 )

[sub_resource type="VisualShaderNodeInput" id=6]
input_name = "uv"

[sub_resource type="VisualShaderNodeVectorOp" id=7]
default_input_values = [ 0, Vector3( 0, 0, 0 ), 1, Vector3( 2, 2, 0 ) ]
operator = 2

[sub_resource type="VisualShaderNodeVectorOp" id=8]
default_input_values = [ 0, Vector3( 0, 0, 0 ), 1, Vector3( 1, 1, 0 ) ]
operator = 1

[sub_resource type="VisualShaderNodeVectorLen" id=9]
output_port_for_preview = 0

[sub_resource type="VisualShaderNodeVectorOp" id=10]
output_port_for_preview = 0
default_input_values = [ 0, Vector3( 0, 0, 0 ), 1, Vector3( 1.8, 1.8, 1.8 ) ]
operator = 2

[sub_resource type="OpenSimplexNoise" id=11]
period = 32.0
persistence = 0.25

[sub_resource type="NoiseTexture" id=12]
seamless = true
noise = SubResource( 11 )

[sub_resource type="VisualShaderNodeTexture" id=13]
output_port_for_preview = 0
texture = SubResource( 12 )

[sub_resource type="VisualShaderNodeVectorOp" id=14]
output_port_for_preview = 0
default_input_values = [ 0, Vector3( 0, 0, 0 ), 1, Vector3( 5, 5, 5 ) ]
operator = 2

[sub_resource type="VisualShaderNodeInput" id=15]
input_name = "world"

[sub_resource type="VisualShaderNodeTransformDecompose" id=16]

[sub_resource type="VisualShaderNodeTransformDecompose" id=17]

[sub_resource type="VisualShaderNodeTransformCompose" id=18]

[sub_resource type="VisualShaderNodeTransformMult" id=19]

[sub_resource type="VisualShaderNodeInput" id=20]
input_name = "inv_camera"

[sub_resource type="VisualShaderNodeInput" id=21]
input_name = "modelview"

[sub_resource type="VisualShaderNodeTransformDecompose" id=22]

[sub_resource type="VisualShaderNodeVectorLen" id=23]

[sub_resource type="VisualShaderNodeVectorLen" id=24]

[sub_resource type="VisualShaderNodeVectorLen" id=25]

[sub_resource type="VisualShaderNodeTransformCompose" id=26]
default_input_values = [ 0, Vector3( 0, 0, 0 ), 1, Vector3( 0, 0, 0 ), 2, Vector3( 0, 0, 0 ), 3, Vector3( 1, 1, 1 ) ]

[sub_resource type="VisualShaderNodeTransformMult" id=27]
operator = 2

[sub_resource type="VisualShaderNodeInput" id=28]
input_name = "camera"

[sub_resource type="VisualShaderNodeTransformVecMult" id=29]

[sub_resource type="VisualShaderNodeInput" id=30]
input_name = "vertex"

[sub_resource type="VisualShader" id=31]
code = "shader_type spatial;
render_mode unshaded, skip_vertex_transform;

uniform sampler2D tex_frg_2;uniform sampler2D tex_frg_8;


void vertex() {
// Input:16
	mat4 n_out16p0;
	n_out16p0 = MODELVIEW_MATRIX;

// TransformDecompose:19
	vec3 n_out19p0;
	vec3 n_out19p1;
	vec3 n_out19p2;
	vec3 n_out19p3;
	n_out19p0 = n_out16p0[0].xyz;
	n_out19p1 = n_out16p0[1].xyz;
	n_out19p2 = n_out16p0[2].xyz;
	n_out19p3 = n_out16p0[3].xyz;

// VectorLen:20
	float n_out20p0;
	n_out20p0 = length( n_out19p0 );

// VectorLen:21
	float n_out21p0;
	n_out21p0 = length( n_out19p1 );

// VectorLen:22
	float n_out22p0;
	n_out22p0 = length( n_out19p2 );

// TransformCompose:23
	vec3 n_in23p3 = vec3(1.00000,1.00000,1.00000);
	mat4 n_out23p0;
	n_out23p0 = mat4( vec4(vec3(n_out20p0), 0.0) , vec4(vec3(n_out21p0), 0.0) , vec4(vec3(n_out22p0),0.0), vec4(n_in23p3,1.0) );

// Input:15
	mat4 n_out15p0;
	n_out15p0 = INV_CAMERA_MATRIX;

// Input:3
	mat4 n_out3p0;
	n_out3p0 = CAMERA_MATRIX;

// TransformDecompose:11
	vec3 n_out11p0;
	vec3 n_out11p1;
	vec3 n_out11p2;
	vec3 n_out11p3;
	n_out11p0 = n_out3p0[0].xyz;
	n_out11p1 = n_out3p0[1].xyz;
	n_out11p2 = n_out3p0[2].xyz;
	n_out11p3 = n_out3p0[3].xyz;

// Input:10
	mat4 n_out10p0;
	n_out10p0 = WORLD_MATRIX;

// TransformDecompose:12
	vec3 n_out12p0;
	vec3 n_out12p1;
	vec3 n_out12p2;
	vec3 n_out12p3;
	n_out12p0 = n_out10p0[0].xyz;
	n_out12p1 = n_out10p0[1].xyz;
	n_out12p2 = n_out10p0[2].xyz;
	n_out12p3 = n_out10p0[3].xyz;

// TransformCompose:13
	mat4 n_out13p0;
	n_out13p0 = mat4( vec4(n_out11p0, 0.0) , vec4(n_out11p1, 0.0) , vec4(n_out11p2,0.0), vec4(n_out12p3,1.0) );

// TransformMult:14
	mat4 n_out14p0;
	n_out14p0 = n_out15p0 * n_out13p0;

// TransformMult:24
	mat4 n_out24p0;
	n_out24p0 = matrixCompMult( n_out23p0 , n_out14p0 );

// Input:9
	vec3 n_out9p0;
	n_out9p0 = VERTEX;

// TransformVectorMult:8
	vec3 n_out8p0;
	n_out8p0 = ( n_out24p0 * vec4(n_out9p0, 1.0) ).xyz;

// Output:0
	VERTEX = n_out8p0;

}

void fragment() {
// Input:3
	vec3 n_out3p0;
	n_out3p0 = vec3(UV,0.0);

// VectorOp:4
	vec3 n_in4p1 = vec3(2.00000,2.00000,0.00000);
	vec3 n_out4p0;
	n_out4p0 = n_out3p0 * n_in4p1;

// VectorOp:5
	vec3 n_in5p1 = vec3(1.00000,1.00000,0.00000);
	vec3 n_out5p0;
	n_out5p0 = n_out4p0 - n_in5p1;

// VectorLen:6
	float n_out6p0;
	n_out6p0 = length( n_out5p0 );

// Texture:2
	vec3 n_out2p0;
	float n_out2p1;
	vec4 tex_frg_2_read = texture( tex_frg_2 , vec3(n_out6p0).xy );
	n_out2p0 = tex_frg_2_read.rgb;
	n_out2p1 = tex_frg_2_read.a;

// Input:10
	float n_out10p0;
	n_out10p0 = TIME;

// VectorOp:11
	vec3 n_out11p0;
	n_out11p0 = n_out3p0 + vec3(n_out10p0);

// Texture:8
	vec3 n_out8p0;
	float n_out8p1;
	vec4 tex_frg_8_read = texture( tex_frg_8 , n_out11p0.xy );
	n_out8p0 = tex_frg_8_read.rgb;
	n_out8p1 = tex_frg_8_read.a;

// VectorOp:7
	vec3 n_out7p0;
	n_out7p0 = n_out2p0 * n_out8p0;

// VectorOp:9
	vec3 n_in9p1 = vec3(5.00000,5.00000,5.00000);
	vec3 n_out9p0;
	n_out9p0 = n_out7p0 * n_in9p1;

// Output:0
	ALBEDO = n_out9p0;
	ALPHA = n_out2p1;

}

void light() {
// Output:0

}
"
graph_offset = Vector2( -463, 113.961 )
flags/skip_vertex_transform = true
flags/unshaded = true
nodes/vertex/0/position = Vector2( 840, 140 )
nodes/vertex/3/node = SubResource( 28 )
nodes/vertex/3/position = Vector2( -700, 120 )
nodes/vertex/8/node = SubResource( 29 )
nodes/vertex/8/position = Vector2( 560, 180 )
nodes/vertex/9/node = SubResource( 30 )
nodes/vertex/9/position = Vector2( 280, 280 )
nodes/vertex/10/node = SubResource( 15 )
nodes/vertex/10/position = Vector2( -700, 280 )
nodes/vertex/11/node = SubResource( 16 )
nodes/vertex/11/position = Vector2( -500, 120 )
nodes/vertex/12/node = SubResource( 17 )
nodes/vertex/12/position = Vector2( -500, 280 )
nodes/vertex/13/node = SubResource( 18 )
nodes/vertex/13/position = Vector2( -200, 220 )
nodes/vertex/14/node = SubResource( 19 )
nodes/vertex/14/position = Vector2( 40, 140 )
nodes/vertex/15/node = SubResource( 20 )
nodes/vertex/15/position = Vector2( -200, 140 )
nodes/vertex/16/node = SubResource( 21 )
nodes/vertex/16/position = Vector2( -720, -40 )
nodes/vertex/19/node = SubResource( 22 )
nodes/vertex/19/position = Vector2( -500, -40 )
nodes/vertex/20/node = SubResource( 23 )
nodes/vertex/20/position = Vector2( -200, -80 )
nodes/vertex/21/node = SubResource( 24 )
nodes/vertex/21/position = Vector2( -200, -20 )
nodes/vertex/22/node = SubResource( 25 )
nodes/vertex/22/position = Vector2( -200, 40 )
nodes/vertex/23/node = SubResource( 26 )
nodes/vertex/23/position = Vector2( 20, -40 )
nodes/vertex/24/node = SubResource( 27 )
nodes/vertex/24/position = Vector2( 280, 140 )
nodes/vertex/connections = PoolIntArray( 13, 0, 14, 1, 9, 0, 8, 1, 15, 0, 14, 0, 12, 3, 13, 3, 11, 0, 13, 0, 11, 1, 13, 1, 11, 2, 13, 2, 3, 0, 11, 0, 16, 0, 19, 0, 19, 2, 22, 0, 19, 1, 21, 0, 19, 0, 20, 0, 23, 0, 24, 0, 14, 0, 24, 1, 24, 0, 8, 0, 8, 0, 0, 0, 10, 0, 12, 0, 22, 0, 23, 2, 21, 0, 23, 1, 20, 0, 23, 0 )
nodes/fragment/0/position = Vector2( 700, 200 )
nodes/fragment/2/node = SubResource( 5 )
nodes/fragment/2/position = Vector2( 0, 180 )
nodes/fragment/3/node = SubResource( 6 )
nodes/fragment/3/position = Vector2( -760, 260 )
nodes/fragment/4/node = SubResource( 7 )
nodes/fragment/4/position = Vector2( -600, 260 )
nodes/fragment/5/node = SubResource( 8 )
nodes/fragment/5/position = Vector2( -420, 260 )
nodes/fragment/6/node = SubResource( 9 )
nodes/fragment/6/position = Vector2( -220, 280 )
nodes/fragment/7/node = SubResource( 10 )
nodes/fragment/7/position = Vector2( 220, 160 )
nodes/fragment/8/node = SubResource( 13 )
nodes/fragment/8/position = Vector2( 0, 400 )
nodes/fragment/9/node = SubResource( 14 )
nodes/fragment/9/position = Vector2( 440, 160 )
nodes/fragment/10/node = SubResource( 1 )
nodes/fragment/10/position = Vector2( -480, 560 )
nodes/fragment/11/node = SubResource( 2 )
nodes/fragment/11/position = Vector2( -220, 480 )
nodes/fragment/connections = PoolIntArray( 4, 0, 5, 0, 5, 0, 6, 0, 2, 0, 7, 0, 2, 1, 0, 1, 3, 0, 4, 0, 6, 0, 2, 0, 8, 0, 7, 1, 7, 0, 9, 0, 9, 0, 0, 0, 3, 0, 11, 0, 10, 0, 11, 1, 11, 0, 8, 0 )

[resource]
shader = SubResource( 31 )
